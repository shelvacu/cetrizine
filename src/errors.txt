http response: Response { status: ServiceUnavailable, headers: Headers { Date: Fri, 26 Apr 2019 11:15:32 GMT
, Content-Type: application/json
, Content-Length: 105
, Connection: keep-alive
, Set-Cookie: __cfduid=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX; expires=Sat, 25-Apr-20 11:15:32 GMT; path=/; domain=.discordapp.com; HttpOnly
, Strict-Transport-Security: max-age=31536000; includeSubDomains
, Via: 1.1 google
, Alt-Svc: clear
, Expect-CT: max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
, Server: cloudflare
, CF-RAY: XXXXXXXXXXXXXXXX-XXX
, }, version: Http11, url: "https://discordapp.com/api/v6/channels/XXXXXXXXXXXXXXXXXX/messages?limit=100&before=XXXXXXXXXXXXXXXXXX", status_raw: RawStatus(503, "SERVICE UNAVAILABLE"), message: Http11Message { is_proxied: false, method: None, stream: Wrapper { obj: Some(Reading(SizedReader(remaining=105))) } } }
body: "{\"code\": 130000, \"message\": \"This resource is currently overloaded, and thus too busy to serve requests\"}"



thread '<unnamed>' panicked at 'unable to grab archive: Sql(SqliteFailure(Error { code: DatabaseBusy, extended_code: 5 }, Some("database is locked")))', src/libcore/result.rs:997:5


Archived 100 message(s), 347909397743271946 thru 347901391651602442 in Discord Bots#verification
thread '<unnamed>' panicked at 'unable to grab archive: Sql(NulError(NulError(1, [50, 0, 48])))', src/libcore/result.rs:997:5
note: Some details are olmitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39
   1: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:71
   2: std::panicking::default_hook::{{closure}}
             at src/libstd/sys_common/backtrace.rs:59
             at src/libstd/panicking.rs:197
   3: std::panicking::default_hook
             at src/libstd/panicking.rs:211
   4: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:474
   5: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:381
   6: rust_begin_unwind
             at src/libstd/panicking.rs:308
   7: core::panicking::panic_fmt
             at src/libcore/panicking.rs:85
   8: core::result::unwrap_failed
             at /rustc/aa99abeb262307d5e9aa11a792312fd620b7f89a/src/libcore/macros.rs:18
   9: core::result::Result<T,E>::expect
             at /rustc/aa99abeb262307d5e9aa11a792312fd620b7f89a/src/libcore/result.rs:825
  10: <cetrizine::Handler as serenity::client::event_handler::EventHandler>::ready::{{closure}}
             at src/main.rs:916


http response: Response { status: InternalServerError, headers: Headers { Date: Fri, 03 May 2019 04:36:46 GMT
, Content-Type: application/json
, Content-Length: 52
, Connection: keep-alive
, Set-Cookie: __cfduid=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX; expires=Sat, 02-May-20 04:36:36 GMT; path=/; domain=.discordapp.com; HttpOnly
, Via: 1.1 google
, Alt-Svc: clear
, Expect-CT: max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
, Server: cloudflare
, CF-RAY: XXXXXXXXXXXXXXXX-XXX
, }, version: Http11, url: "https://discordapp.com/api/v6/channels/XXXXXXXXXXXXXXXXXX/messages?limit=100&before=XXXXXXXXXXXXXXXXXX", status_raw: RawStatus(500, "INTERNAL SERVER ERROR"), message: Http11Message { is_proxied: false, method: None, stream: Wrapper { obj: Some(Reading(SizedReader(remaining=52))) } } }
body: "{\"code\": 0, \"message\": \"500: Internal Server Error\"}"
